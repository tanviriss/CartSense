import { type MongoClient, type Db as MongoDatabase } from "mongodb";
import type { RunnableConfig } from "@langchain/core/runnables";
import { BaseCheckpointSaver, type Checkpoint, type CheckpointListOptions, type CheckpointTuple, type SerializerProtocol, type PendingWrite, type CheckpointMetadata } from "@langchain/langgraph-checkpoint";
export type MongoDBSaverParams = {
    client: MongoClient;
    dbName?: string;
    checkpointCollectionName?: string;
    checkpointWritesCollectionName?: string;
};
/**
 * A LangGraph checkpoint saver backed by a MongoDB database.
 */
export declare class MongoDBSaver extends BaseCheckpointSaver {
    protected client: MongoClient;
    protected db: MongoDatabase;
    checkpointCollectionName: string;
    checkpointWritesCollectionName: string;
    constructor({ client, dbName, checkpointCollectionName, checkpointWritesCollectionName, }: MongoDBSaverParams, serde?: SerializerProtocol);
    /**
     * Retrieves a checkpoint from the MongoDB database based on the
     * provided config. If the config contains a "checkpoint_id" key, the checkpoint with
     * the matching thread ID and checkpoint ID is retrieved. Otherwise, the latest checkpoint
     * for the given thread ID is retrieved.
     */
    getTuple(config: RunnableConfig): Promise<CheckpointTuple | undefined>;
    /**
     * Retrieve a list of checkpoint tuples from the MongoDB database based
     * on the provided config. The checkpoints are ordered by checkpoint ID
     * in descending order (newest first).
     */
    list(config: RunnableConfig, options?: CheckpointListOptions): AsyncGenerator<CheckpointTuple>;
    /**
     * Saves a checkpoint to the MongoDB database. The checkpoint is associated
     * with the provided config and its parent config (if any).
     */
    put(config: RunnableConfig, checkpoint: Checkpoint, metadata: CheckpointMetadata): Promise<RunnableConfig>;
    /**
     * Saves intermediate writes associated with a checkpoint to the MongoDB database.
     */
    putWrites(config: RunnableConfig, writes: PendingWrite[], taskId: string): Promise<void>;
    deleteThread(threadId: string): Promise<void>;
}
